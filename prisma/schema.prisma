// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      String   @default("user") // admin or user
  createdAt DateTime @default(now())
}

model Patient {
  patient_id              Int            @id @default(autoincrement())
  patient_name            String         @db.VarChar(100)
  mobile_number           String         @unique @db.VarChar(15)
  email                   String?        @db.VarChar(100)
  date_of_birth           DateTime?      @db.Date
  gender                  Gender? // Enum defined below
  address_line1           String?        @db.VarChar(255)
  city                    String?        @db.VarChar(100)
  state_province          String?        @db.VarChar(100)
  postal_code             String?        @db.VarChar(20)
  emergency_contact_phone String?        @db.VarChar(15)
  status                  PatientStatus
  image_url               String?        @db.VarChar(255)
  created_at              DateTime       @default(now())
  updated_at              DateTime?      @updatedAt
  Prescription            Prescription[]
}

enum Gender {
  Male
  Female
  Other
}

enum PatientStatus {
  Active
  Suspended
  Deactivated
}

model Doctor {
  doctor_id      Int            @id @default(autoincrement())
  doctor_image   String?        @db.VarChar(255) // URL or path to the image
  doctor_name    String         @db.VarChar(100)
  specialization String?        @db.VarChar(100)
  email          String?        @db.VarChar(100)
  phone_number   String?        @db.VarChar(15)
  address_line1  String?        @db.VarChar(255)
  city           String?        @db.VarChar(100)
  state_province String?        @db.VarChar(100)
  postal_code    String?        @db.VarChar(20)
  doctor_fee     Decimal?       @db.Decimal(10, 2)
  status         DoctorStatus
  created_at     DateTime       @default(now())
  updated_at     DateTime?      @updatedAt
  Prescription   Prescription[]
}

enum DoctorStatus {
  Active
  Suspended
  Retired
}

model Treatmentlist {
  treatment_id      Int                @id @default(autoincrement())
  treatment_name    String             @db.VarChar(100)
  total_cost        Decimal            @db.Decimal(10, 2)
  duration_months   Int
  created_at        DateTime           @default(now())
  updated_at        DateTime?          @updatedAt
  prescriptionItems PrescriptionItem[]
}

model Medicine {
  medicine_id Int                @id @default(autoincrement())
  name        String             @db.VarChar(100)
  quantity    Int
  created_at  DateTime           @default(now())
  updated_at  DateTime?          @updatedAt
  items       PrescriptionItem[]
}

model Prescription {
  prescription_id Int      @id @default(autoincrement())
  patient_id      Int
  doctor_id       Int
  total_cost      Int
  prescribed_at   DateTime @default(now())

  patient Patient            @relation(fields: [patient_id], references: [patient_id])
  doctor  Doctor             @relation(fields: [doctor_id], references: [doctor_id])
  items   PrescriptionItem[]
}

model PrescriptionItem {
  item_id         Int           @id @default(autoincrement())
  prescription_id Int
  medicine_id     Int
  treatment_id    Int
  dose_morning    String
  dose_mid_day    String
  dose_night      String
  discount_type   DiscountType?
  discount_value  Float?
  duration_days   Int
  advice          String?

  prescription Prescription  @relation(fields: [prescription_id], references: [prescription_id], onDelete: Cascade)
  medicine     Medicine      @relation(fields: [medicine_id], references: [medicine_id])
  treatment    Treatmentlist @relation(fields: [treatment_id], references: [treatment_id])
}

enum DiscountType {
  None
  Flat
  Percentage
}
